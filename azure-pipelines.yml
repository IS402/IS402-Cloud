# Node.js Express Web App to Linux on Azure
# This pipeline builds, tests, and deploys a Node.js Express app to Azure using a self-hosted agent.

trigger:
  - main  # Trigger the pipeline on changes to the 'main' branch

variables:
  # Azure Resource Manager connection
  azureSubscription: '974ba5ab-9bc7-41c9-84ac-d53863572299'

  # Azure Web App name
  webAppName: 'wumiibo'

  # Environment name for deployment tracking
  environmentName: 'wumiibo'

  # Name of the self-hosted agent pool
  selfHostedPoolName: 'Self-hosted'

  # Port for the Express.js server
  serverPort: 8080

stages:
- stage: Build
  displayName: "Build Stage"
  jobs:
  - job: Build
    displayName: "Build and Test"
    pool:
      name: $(selfHostedPoolName)  # Use the self-hosted agent pool

    steps:
    # Install Node.js
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'  # Specify Node.js version
      displayName: 'Install Node.js'

    # Install dependencies, build, and test the app
    - script: |
        npm install
        npm run build --if-present  # Build if build script exists
        npm run test --if-present   # Test if test script exists
      displayName: 'Install dependencies, build, and test'

    # Archive the build files
    - task: ArchiveFiles@2
      displayName: 'Archive Build Artifacts'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'  # Root folder for the archive
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true

    # Publish the artifact for the next stage
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop
      displayName: 'Publish Build Artifacts'

- stage: Deploy
  displayName: "Deploy Stage"
  dependsOn: Build
  condition: succeeded()  # Proceed only if the Build stage succeeds
  jobs:
  - deployment: Deploy
    displayName: "Deploy to Azure"
    environment: $(environmentName)
    pool:
      name: $(selfHostedPoolName)  # Use the self-hosted agent pool

    strategy:
      runOnce:
        deploy:
          steps:
          # Deploy the app to Azure Web App
          - task: AzureWebApp@1
            displayName: 'Deploy to Azure Web App: $(webAppName)'
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webAppLinux  # Targeting a Linux-based Web App
              appName: $(webAppName)
              runtimeStack: 'NODE|20LTS'  # Runtime stack (Node.js 20 LTS)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              startUpCommand: 'node server.js --port $(serverPort)'  # Start the server on the specified port