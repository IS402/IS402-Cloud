trigger:
  branches:
    include:
      - main  # Trigger pipeline on changes to the 'main' branch

variables:
  # ACR Configuration
  ACR_NAME: <your_acr_name>            # Replace with your Azure Container Registry name
  ACR_LOGIN_SERVER: <your_acr_login_server>  # e.g., myacr.azurecr.io
  ACR_USERNAME: <your_acr_admin_username>   # Replace with the ACR admin username
  ACR_PASSWORD: <your_acr_admin_password>   # Replace with the ACR admin password

  # Images
  FRONTEND_IMAGE: frontend
  BACKEND_IMAGE: backend

stages:
- stage: BuildAndPush
  displayName: Build and Push Docker Images to ACR
  jobs:
  - job: BuildAndPush
    displayName: Build and Push Docker Images
    pool:
      name: Self-hosted 1  # Use the self-hosted agent pool
    steps:
    - script: |
        echo "Logging in to ACR..."
        echo $(ACR_PASSWORD) | docker login $(ACR_LOGIN_SERVER) -u $(ACR_USERNAME) --password-stdin
      displayName: Log in to ACR

    - script: |
        echo "Building and pushing frontend image..."
        docker build -t $(ACR_LOGIN_SERVER)/$(FRONTEND_IMAGE):latest ./frontend
        docker push $(ACR_LOGIN_SERVER)/$(FRONTEND_IMAGE):latest
      displayName: Build and Push Frontend Image

    - script: |
        echo "Building and pushing backend image..."
        docker build -t $(ACR_LOGIN_SERVER)/$(BACKEND_IMAGE):latest ./backend
        docker push $(ACR_LOGIN_SERVER)/$(BACKEND_IMAGE):latest
      displayName: Build and Push Backend Image

- stage: Deploy
  displayName: Deploy to Azure App Service
  dependsOn: BuildAndPush
  jobs:
  - job: Deploy
    displayName: Deploy Docker Compose to App Service
    pool:
      name: Self-hosted 1
    steps:
    - script: |
        echo "Creating Docker Compose file for production deployment..."
        echo "
        version: '3.8'

        services:
          frontend:
            image: $(ACR_LOGIN_SERVER)/$(FRONTEND_IMAGE):latest
            ports:
              - '3000:3000'
            environment:
              - NODE_OPTIONS=--openssl-legacy-provider
              - CHOKIDAR_USEPOLLING=true

          backend:
            image: $(ACR_LOGIN_SERVER)/$(BACKEND_IMAGE):latest
            ports:
              - '5000:5000'
            env_file: ./backend/.env

        networks:
          is402:
            driver: bridge
        " > docker-compose.prod.yml
      displayName: Generate Docker Compose File

    - script: |
        echo "Deploying containers to Azure App Service..."
        az webapp config container set \
          --name <your_app_service_name> \
          --resource-group <your_resource_group_name> \
          --multicontainer-config-type compose \
          --multicontainer-config-file docker-compose.prod.yml
      displayName: Deploy to Azure App Service
